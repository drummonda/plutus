Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _fs = require('fs');

var _babelTemplate = require('babel-template');

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

var _babelTraverse = require('babel-traverse');

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _babylon = require('babylon');

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _optimize = require('./optimize');

var _optimize2 = _interopRequireDefault(_optimize);

var _escapeBraces = require('./escapeBraces');

var _escapeBraces2 = _interopRequireDefault(_escapeBraces);

var _transformSvg = require('./transformSvg');

var _transformSvg2 = _interopRequireDefault(_transformSvg);

var _fileExistsWithCaseSync = require('./fileExistsWithCaseSync');

var _fileExistsWithCaseSync2 = _interopRequireDefault(_fileExistsWithCaseSync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var buildSvg = (0, _babelTemplate2['default'])('\n  var SVG_NAME = function SVG_NAME(props) { return SVG_CODE; };\n');

var buildSvgWithDefaults = (0, _babelTemplate2['default'])('\n  var SVG_NAME = function SVG_NAME(props) { return SVG_CODE; };\n  SVG_NAME.defaultProps = SVG_DEFAULT_PROPS_CODE;\n');

var ignoreRegex = void 0;

exports['default'] = function (_ref) {
  var t = _ref.types;

  function applyPlugin(importIdentifier, importPath, path, state) {
    if (typeof importPath !== 'string') {
      throw new TypeError('`applyPlugin` `importPath` must be a string');
    }
    var _state$opts = state.opts,
        ignorePattern = _state$opts.ignorePattern,
        caseSensitive = _state$opts.caseSensitive;
    var file = state.file;

    if (ignorePattern) {
      // Only set the ignoreRegex once:
      ignoreRegex = ignoreRegex || new RegExp(ignorePattern);
      // Test if we should ignore this:
      if (ignoreRegex.test(importPath)) {
        return;
      }
    }
    // This plugin only applies for SVGs:
    if ((0, _path.extname)(importPath) === '.svg') {
      var iconPath = state.file.opts.filename;
      var svgPath = _resolve2['default'].sync(importPath, { basedir: (0, _path.dirname)(iconPath) });
      if (caseSensitive && !(0, _fileExistsWithCaseSync2['default'])(svgPath)) {
        throw new Error('File path didn\'t match case of file on disk: ' + String(svgPath));
      }
      if (!svgPath) {
        throw new Error('File path does not exist: ' + String(importPath));
      }
      var rawSource = (0, _fs.readFileSync)(svgPath, 'utf8');
      var optimizedSource = state.opts.svgo === false ? rawSource : (0, _optimize2['default'])(rawSource, state.opts.svgo);

      var escapeSvgSource = (0, _escapeBraces2['default'])(optimizedSource);

      var parsedSvgAst = (0, _babylon.parse)(escapeSvgSource, {
        sourceType: 'module',
        plugins: ['jsx']
      });

      (0, _babelTraverse2['default'])(parsedSvgAst, (0, _transformSvg2['default'])(t));

      var svgCode = _babelTraverse2['default'].removeProperties(parsedSvgAst.program.body[0].expression);

      var opts = {
        SVG_NAME: importIdentifier,
        SVG_CODE: svgCode
      };

      // Move props off of element and into defaultProps
      if (svgCode.openingElement.attributes.length > 1) {
        var keepProps = [];
        var defaultProps = [];

        svgCode.openingElement.attributes.forEach(function (prop) {
          if (prop.type === 'JSXSpreadAttribute') {
            keepProps.push(prop);
          } else {
            defaultProps.push(t.objectProperty(t.identifier(prop.name.name), prop.value));
          }
        });

        svgCode.openingElement.attributes = keepProps;
        opts.SVG_DEFAULT_PROPS_CODE = t.objectExpression(defaultProps);
      }

      if (opts.SVG_DEFAULT_PROPS_CODE) {
        var svgReplacement = buildSvgWithDefaults(opts);
        path.replaceWithMultiple(svgReplacement);
      } else {
        var _svgReplacement = buildSvg(opts);
        path.replaceWith(_svgReplacement);
      }
      file.get('ensureReact')();
      file.set('ensureReact', function () {});
    }
  }

  return {
    visitor: {
      Program: {
        enter: function () {
          function enter(_ref2, _ref3) {
            var scope = _ref2.scope,
                node = _ref2.node;
            var file = _ref3.file;

            if (!scope.hasBinding('React')) {
              var reactImportDeclaration = t.importDeclaration([t.importDefaultSpecifier(t.identifier('React'))], t.stringLiteral('react'));

              file.set('ensureReact', function () {
                node.body.unshift(reactImportDeclaration);
              });
            } else {
              file.set('ensureReact', function () {});
            }
          }

          return enter;
        }()
      },
      CallExpression: function () {
        function CallExpression(path, state) {
          var node = path.node;

          var requireArg = node.arguments.length > 0 ? node.arguments[0] : null;
          var filePath = t.isStringLiteral(requireArg) ? requireArg.value : null;
          if (node.callee.name === 'require' && t.isVariableDeclarator(path.parent) && filePath) {
            applyPlugin(path.parent.id, filePath, path.parentPath.parentPath, state);
          }
        }

        return CallExpression;
      }(),
      ImportDeclaration: function () {
        function ImportDeclaration(path, state) {
          var node = path.node;

          if (node.specifiers.length > 0) {
            applyPlugin(node.specifiers[0].local, node.source.value, path, state);
          }
        }

        return ImportDeclaration;
      }()
    }
  };
};