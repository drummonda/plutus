"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

var _fs = _interopRequireDefault(require("fs"));

var _package = _interopRequireDefault(require("../package.json"));

var _fileCommand = _interopRequireDefault(require("./fileCommand"));

var _dirCommand = _interopRequireDefault(require("./dirCommand"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const parseObject = (arg, accumulation = {}) => {
  const [name, value] = arg.split('=');
  return _extends({}, accumulation, {
    [name]: value
  });
};

const isFile = filePath => {
  try {
    const stats = _fs.default.statSync(filePath);

    return stats.isFile();
  } catch (error) {
    return false;
  }
};

const parseConfig = name => arg => {
  const json = isFile(arg) ? _fs.default.readFileSync(arg) : arg;

  try {
    return JSON.parse(json);
  } catch (error) {
    (0, _util.exitError)(`"${name}" is not valid, please specify a file or use inline JSON.`);
    return null;
  }
};

_commander.default.version(_package.default.version).usage('[options] <file|directory>').option('--config-file <file>', 'specify the path of the svgr config').option('--no-runtime-config', 'disable runtime config (".svgrrc", ".svgo.yml", ".prettierrc")').option('-d, --out-dir <dirname>', 'output files into a directory').option('--ext <ext>', 'specify a custom file extension (default: "js")').option('--filename-case <case>', 'specify filename case ("pascal", "kebab", "camel") (default: "pascal")').option('--icon', 'use "1em" as width and height').option('--native', 'add react-native support with react-native-svg').option('--ref', 'forward ref to SVG root element').option('--no-dimensions', 'remove width and height from root SVG tag').option('--expand-props [position]', 'disable props expanding ("start", "end", "none") (default: "end")').option('--svg-props <property=value>', 'add props to the svg element', parseObject).option('--replace-attr-values <old=new>', 'replace an attribute value', parseObject).option('--template <file>', 'specify a custom template to use').option('--title-prop', 'create a title element linked with props').option('--prettier-config <fileOrJson>', 'Prettier config', parseConfig('--prettier-config')).option('--no-prettier', 'disable Prettier').option('--svgo-config <fileOrJson>', 'SVGO config', parseConfig('--svgo-config')).option('--no-svgo', 'disable SVGO');

_commander.default.on('--help', () => {
  console.log(`
  Examples:
    svgr --replace-attr-values "#fff=currentColor" icon.svg
`);
});

_commander.default.parse(process.argv);

async function run() {
  const errors = [];

  const filenames = _commander.default.args.reduce((globbed, input) => {
    let files = _glob.default.sync(input);

    if (!files.length) files = [input];
    return globbed.concat(files);
  }, []);

  await Promise.all(filenames.map(async filename => {
    try {
      await (0, _util.stat)(filename);
    } catch (error) {
      errors.push(`${filename} does not exist`);
    }
  }));

  if (errors.length) {
    console.error(errors.join('. '));
    process.exit(2);
  }

  const config = _extends({}, _commander.default);

  if (config.expandProps === 'none') {
    config.expandProps = false;
  }

  if (config.dimensions === true) {
    delete config.dimensions;
  }

  if (config.svgo === true) {
    delete config.svgo;
  }

  if (config.prettier === true) {
    delete config.prettier;
  }

  if (config.template) {
    try {
      const template = require(_path.default.join(process.cwd(), _commander.default.template)); // eslint-disable-line global-require, import/no-dynamic-require


      if (template.default) config.template = template.default;else config.template = template;
      if (typeof config.template !== 'function') throw new Error('Template must be a function');
    } catch (error) {
      console.error(`Error when loading template: ${_commander.default.template}\n`);
      console.error(error.stack);
      process.exit(2);
    }
  }

  const command = _commander.default.outDir ? _dirCommand.default : _fileCommand.default;
  await command(_commander.default, filenames, config);
}

run().catch(error => {
  setTimeout(() => {
    throw error;
  });
});